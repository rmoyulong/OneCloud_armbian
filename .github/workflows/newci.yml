name: 玩客云armbain最新版

on:
  #对应的是 UTC 时间，需要转换，0 代表北京时间8点，每个月1日/15日12点编译一次
  #关闭则手动编译
  workflow_dispatch:
    inputs:
      BRANCH_TYPE:
        description: '分支类型'     
        required: false
        default: 'current' 
        type: choice
        options:
        - current
        - edge

#CI权限
permissions: write-all
  
jobs:
  build_armbian_firmware:
    name:  编译-${{ github.event.inputs.BRANCH_TYPE }}_${{ matrix.IMAGE_TYPE }}_${{ matrix.RELEASE_type }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        #IMAGE_TYPE: [minimal, cli, desktop]
        IMAGE_TYPE: [minimal, cli]
        RELEASE_type:
          # - focal # Ubuntu 20.04 LTS
          # - jammy # Ubuntu 22.04 LTS
          - noble # Ubuntu 24.04 LTS
          - oracular # Ubuntu 24.10
          - plucky # Ubuntu 25.04
          # - buster # Debian 10
          # - bullseye # Debian 11
          - bookworm # Debian 12
          - trixie # Debian 13
          - sid # Debian unstable
        
    steps:
      - name: 清理服务器空间(Ubuntu)
        uses: rmoyulong/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true

          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
            
      - name: 检查项目
        uses: actions/checkout@main
 
      - name: 检查分配的服务器性能
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
    
      - name: 下载最新armbian库
        run: |
           git clone --depth=1 --branch=main https://github.com/armbian/build build
           
           CORE_DATE=$(TZ=Asia/Shanghai date +"%y.%m.%d")
           CORE_TAG="玩客云armbian最新版_"
           show_tag_name=${CORE_TAG}${CORE_DATE}
           echo "show_tag_name=$show_tag_name" >> $GITHUB_ENV

      - name: 编译
        run: |
          # Don't update remote cache
          export GITHUB_ACTIONS=false
          cd build
          if [[ "${{ matrix.IMAGE_TYPE }}" == "*desktop*" ]]; then
              sudo --preserve-env \
                ./compile.sh build \
                  ALLOW_ROOT=yes \
                  BOARD=onecloud \
                  BRANCH=${{ github.event.inputs.BRANCH_TYPE }} \
                  RELEASE=${{ matrix.RELEASE_type }} \
                  KERNEL_CONFIGURE=no \
                  BUILD_MINIMAL=${{ matrix.IMAGE_TYPE == 'minimal' && 'yes' || 'no' }} \
                  BUILD_DESKTOP=${{ matrix.IMAGE_TYPE == 'desktop' && 'yes' || 'no' }} \
                  DESKTOP_ENVIRONMENT="xfce" \
                  DESKTOP_ENVIRONMENT_CONFIG_NAME="config_base" \
                  DESKTOP_APPGROUPS_SELECTED="" \
                  EXPERT=yes \
                  SKIP_EXTERNAL_TOOLCHAINS=yes \
                  CLEAN_LEVEL= \
                  USE_CCACHE=no \
                  COMPRESS_OUTPUTIMAGE=img
          else
              sudo --preserve-env \
                ./compile.sh build \
                  ALLOW_ROOT=yes \
                  BOARD=onecloud \
                  BRANCH=${{ github.event.inputs.BRANCH_TYPE }} \
                  RELEASE=${{ matrix.RELEASE_type }} \
                  KERNEL_CONFIGURE=no \
                  BUILD_MINIMAL=${{ matrix.IMAGE_TYPE == 'minimal' && 'yes' || 'no' }} \
                  BUILD_DESKTOP=${{ matrix.IMAGE_TYPE == 'desktop' && 'yes' || 'no' }} \
                  DESKTOP_ENVIRONMENT= \
                  DESKTOP_ENVIRONMENT_CONFIG_NAME= \
                  DESKTOP_APPGROUPS_SELECTED= \
                  EXPERT=yes \
                  SKIP_EXTERNAL_TOOLCHAINS=yes \
                  CLEAN_LEVEL= \
                  USE_CCACHE=no \
                  COMPRESS_OUTPUTIMAGE=img
          fi
          sudo chown $(id -u):$(id -g) -R output/
          
      - name: 安装依赖项
        run: |
          sudo apt install android-sdk-libsparse-utils
          ver="v0.3.2"
          curl -L -o ./AmlImg https://github.com/rmoyulong/AmlImg/releases/download/$ver/AmlImg_${ver}_linux_amd64
          chmod +x ./AmlImg

      - name: 下载并解压最新的 u-boot
        run: |
          echo "::group::Download"
          curl -L -o ./uboot.img https://github.com/rmoyulong/u-boot-onecloud/releases/download/Onecloud_Uboot_23.12.24_18.15.09/eMMC.burn.img
          echo "::endgroup::"
          
          echo "::group::Unpack"
          ./AmlImg unpack ./uboot.img burn/
          echo "::endgroup::"

      - name: 提取boot和rootfs分区
        run: |
          diskimg=$(ls build/output/images/*.img)
          loop=$(sudo losetup --find --show --partscan $diskimg)
          sudo img2simg ${loop}p1 burn/boot.simg
          sudo img2simg ${loop}p2 burn/rootfs.simg
          sudo losetup -d $loop
          sudo chown $(id -u):$(id -g) -R burn/

      - name: 生成刻录映像
        run: |
          echo -n "sha1sum $(sha1sum burn/boot.simg | awk '{print $1}')" >burn/boot.VERIFY
          echo -n "sha1sum $(sha1sum burn/rootfs.simg | awk '{print $1}')" >burn/rootfs.VERIFY
          
          cat <<EOF >>burn/commands.txt
          PARTITION:boot:sparse:boot.simg
          VERIFY:boot:normal:boot.VERIFY
          PARTITION:rootfs:sparse:rootfs.simg
          VERIFY:rootfs:normal:rootfs.VERIFY
          EOF
          
          prefix=$(ls build/output/images/*.img | sed 's/\.img$//')
          burnimg=${prefix}.burn.img
          ./AmlImg pack $burnimg burn/

      - name: 进行哈希处理和压缩
        run: |
          for f in build/output/images/*.img; do
            sha256sum "$f" | tee -a sha256sum
            xz --threads=0 --compress "$f"
          done

      - name: 生成发布信息
        run: |
          cat <<EOF | sed -E 's/^  //' | tee Release.md
            $(cat sha256sum | awk '{printf "%s: `%s`\n", $2, $1}')
          EOF

      - name: 提取版本号
        run: |  
          # 提取版本号
          # latest_image=$(ls ${{ github.workspace }}/build/output/images/Armbian-unofficial_*.img.xz | grep -oE 'Armbian-unofficial_[0-9.]+_.*' | sort -V | tail -n 1) 
          latest_image=$(ls ${{ github.workspace }}/build/output/images/Armbian-unofficial_*.img.xz | sort -V | tail -n 1)
          version=$(echo "$latest_image" | cut -d'_' -f2)  
  
          # 将版本号设置为环境变量  
          echo "VERSION=$version" >> $GITHUB_ENV
          
      - name: 生成标签，上传固件
        uses: ncipollo/release-action@main
        with:
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{env.show_tag_name}}
          artifacts: build/output/images/*
          removeArtifacts: false 
          replacesArtifacts: true          
          body: | 
            ====================🧊固件信息🧊=======================
            ➦ 💻 固件源码：https://github.com/armbian/build
            ➦ 💝 源码分支：${{ github.event.inputs.BRANCH_TYPE }}
            ➦ 🚀 编译版本：${{ env.version }}
            ➦ 🌐 默认用户：root
            ➦ 🔑 默认密码：1234
