name: 全版

on:
  workflow_dispatch:

env:
  SCRIPT_REPO: ${{ github.repository }}
  SCRIPT_REF: ${{ github.ref_name }}
  UBOOT_REPO: hzyitc/u-boot-onecloud
  UBOOT_RELEASE: latest
  UBOOT_BURNIMG: eMMC.burn.img
  ARMBIAN_REPO: armbian/build
  ARMBIAN_REF: v25.11.0-trunk.287

permissions:
  contents: write

jobs:
  prepare:
    name: prepare
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.get.outputs.env }}

    steps:
      - id: get
        name: 获取项目仓库和 Armbian 信息
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          TIME="$(curl https://api.github.com/repos/${SCRIPT_REPO}/actions/runs/${GITHUB_RUN_ID} | jq -r .created_at)"
          TAG="ci-$(date -d "$TIME" -u +'%Y%m%d-%H%M%S-%Z')"

          SCRIPT_SHA=$(curl https://api.github.com/repos/${SCRIPT_REPO}/commits/${SCRIPT_REF} | jq -r .sha)
          UBOOT_TAG=$(curl https://api.github.com/repos/${UBOOT_REPO}/releases/${UBOOT_RELEASE} | jq -r .tag_name)
          ARMBIAN_SHA=$(curl https://api.github.com/repos/${ARMBIAN_REPO}/commits/${ARMBIAN_REF} | jq -r .sha)

          echo "Cloning Armbian repository..."
          git clone https://github.com/armbian/os os

          ARMBIAN_VERSION=$(cat os/stable.json | jq '.version' | sed "s/\"//g")

          cat <<EOF | sed -E 's/^  //' >>$GITHUB_ENV
            TIME=$TIME
            TAG=$TAG
            SCRIPT_SHA=$SCRIPT_SHA
            UBOOT_TAG=$UBOOT_TAG
            ARMBIAN_SHA=$ARMBIAN_SHA
            ARMBIAN_VERSION=$ARMBIAN_VERSION
          EOF

          echo "env=$(cat $GITHUB_ENV | base64 -w 0)" >>$GITHUB_OUTPUT

      - name: 显示项目仓库信息
        run: |
          C_RESET="\e[0m"
          C_BLACK="\e[30m"
          C_RED="\e[31m"
          C_GREEN="\e[32m"
          C_YELLOW="\e[33m"
          C_BLUE="\e[34m"
          C_MAGENTA="\e[35m"
          C_CYAN="\e[36m"
          C_GRAY="\e[37m"

          echo -e "$(cat <<EOF | sed -E 's/^  //'
            TIME: ${C_GREEN}$(date -d "$TIME" +'%Y-%m-%d %H:%M:%S %Z(%:z)')${C_RESET}
            Script: ${C_BLUE}${SCRIPT_REPO}${C_RESET}@${C_MAGENTA}${SCRIPT_REF}${C_RESET}(https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_REF})
                    ${C_YELLOW}${SCRIPT_SHA}${C_RESET}(https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_SHA})
            U-Boot: ${C_BLUE}${UBOOT_REPO}${C_RESET}@${C_MAGENTA}${UBOOT_RELEASE}${C_RESET}(https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_RELEASE})
                    ${C_MAGENTA}${UBOOT_TAG}${C_RESET}(https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_TAG})
            Armbian: ${C_BLUE}${ARMBIAN_REPO}${C_RESET}@${C_MAGENTA}${ARMBIAN_REF}${C_RESET}(https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_REF})
                     ${C_YELLOW}${ARMBIAN_SHA}${C_RESET}(https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_SHA})
          EOF
          )"

          cat <<EOF | sed -E 's/^  //' >>$GITHUB_STEP_SUMMARY
            # $(date -d "$TIME" +'%Y-%m-%d %H:%M:%S %Z(%:z)')

            ## Sources
            Script: [${SCRIPT_REPO}@${SCRIPT_REF}](https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_REF}) ([\`${SCRIPT_SHA}\`](https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_SHA}))
            U-Boot: [${UBOOT_REPO}@${UBOOT_RELEASE}](https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_RELEASE}) ([\`${UBOOT_TAG}\`](https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_TAG}))
            Armbian: [${ARMBIAN_REPO}@${ARMBIAN_REF}](https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_REF}) ([\`${ARMBIAN_SHA}\`](https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_SHA}))

          EOF

      - name: 生成发布信息
        run: |
          cat <<EOF | sed -E 's/^  //' | tee Release.md
            CI-全版 $(date -d "$TIME" +'%Y-%m-%d %H:%M:%S %Z(%:z)')

            # Sources
            Script: [${SCRIPT_REPO}@${SCRIPT_REF}](https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_REF}) ([\`${SCRIPT_SHA}\`](https://github.com/${SCRIPT_REPO}/tree/${SCRIPT_SHA}))
            U-Boot: [${UBOOT_REPO}@${UBOOT_RELEASE}](https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_RELEASE}) ([\`${UBOOT_TAG}\`](https://github.com/${UBOOT_REPO}/releases/tag/${UBOOT_TAG}))
            Armbian: [${ARMBIAN_REPO}@${ARMBIAN_REF}](https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_REF}) ([\`${ARMBIAN_SHA}\`](https://github.com/${ARMBIAN_REPO}/tree/${ARMBIAN_SHA}))

            # SHA256
          EOF

          echo "NAME=$(head --line=1 Release.md)" >>$GITHUB_ENV
          tail --line=+2 Release.md > Body.md

      - name: 上传信息
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          target_commitish: ${{ github.sha }}
          name: ${{ env.NAME }}
          body_path: Body.md

  build-kernel:
    name: 编译Current分支
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - name: 导入环境参数
        run: |
          echo "$(echo "${{ needs.prepare.outputs.env }}" | base64 -d)" >>$GITHUB_ENV

      - name: 检查服务器配置
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          echo "-------------------------------CPU信息-------------------------------------------"
          echo
          echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo "CPU核心及版本信息:$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"
          echo
          echo "-------------------------------内存信息-------------------------------------------"
          echo
          echo "已安装内存详细信息："
          sudo lshw -short -C memory | grep GiB
          echo
          echo "-------------------------------硬盘信息--------------------------------------------"
          echo
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)"
          echo "硬盘详情："
          df -Th

      - name: 检查项目
        uses: actions/checkout@main
        with:
          repository: ${{ env.ARMBIAN_REPO }}
          ref: ${{ env.ARMBIAN_SHA }}

      - name: 编译
        run: |
          sudo --preserve-env \
            ./compile.sh kernel \
              REVISION="${{ env.ARMBIAN_VERSION }}" \
              ALLOW_ROOT=yes \
              BOARD=onecloud \
              BRANCH=current \
              EXPERT=yes
          sudo chown $(id -u):$(id -g) -R output/
        
      - name: 内核哈希信息
        run: |
          for f in output/debs/*.deb; do
            sha256sum "$f" | tee -a sha256sum
          done

      - name: 上传资料
        uses: actions/upload-artifact@main
        with:
          name: kernel-current
          path: output/debs/*
      
      - name: 生成发布信息
        run: |
          cat <<EOF | sed -E 's/^  //' | tee Release.md
            $(cat sha256sum | awk '{printf "%s: `%s`\n", $2, $1}')
          EOF

      - name: 上传最新版本
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          append_body: true
          body_path: Release.md
          files: |
            output/debs/*

  build:
    name: 编译 ${{ matrix.RELEASE }}-current-${{ matrix.TYPE == 'desktop' && matrix.DESKTOP_ENVIRONMENT || matrix.TYPE }}
    needs: [ prepare, build-kernel ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        RELEASE:
          # - focal # Ubuntu 20.04 LTS
          # - jammy # Ubuntu 22.04 LTS
          - noble # Ubuntu 24.04 LTS
          - oracular # Ubuntu 24.10
          - plucky # Ubuntu 25.04
          # - buster # Debian 10
          # - bullseye # Debian 11
          - bookworm # Debian 12
          - trixie # Debian 13
          #- sid # Debian unstable
        TYPE:
          - minimal
          - cli
          - desktop
        include:
          - TYPE: desktop
            DESKTOP_ENVIRONMENT: xfce
            DESKTOP_ENVIRONMENT_CONFIG_NAME: config_base
            DESKTOP_APPGROUPS_SELECTED: ""

    steps:
      - name: 导入环境参数
        run: |
          echo "$(echo "${{ needs.prepare.outputs.env }}" | base64 -d)" >>$GITHUB_ENV

      - name: 检查服务器配置
        run: |
          echo "-------------------------------CPU信息-------------------------------------------"
          echo
          echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo "CPU核心及版本信息:$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c)"
          echo
          echo "-------------------------------内存信息-------------------------------------------"
          echo
          echo "已安装内存详细信息："
          sudo lshw -short -C memory | grep GiB
          echo
          echo "-------------------------------硬盘信息--------------------------------------------"
          echo
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)"
          echo "硬盘详情："
          df -Th
        
      - name: 初始化环境
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo apt update -y
          sudo apt install android-sdk-libsparse-utils
          df -Th

      - name: 检查项目
        uses: actions/checkout@main
        with:
          repository: ${{ env.ARMBIAN_REPO }}
          ref: ${{ env.ARMBIAN_SHA }}

      - name: 下载内核
        uses: actions/download-artifact@main
        with:
          name: kernel-current
          path: output/debs/

      - name: 编译
        run: |
          sudo --preserve-env \
            ./compile.sh build \
              REVISION="${{ env.ARMBIAN_VERSION }}" \
              ALLOW_ROOT=yes \
              BOARD=onecloud \
              BRANCH=current \
              RELEASE=${{ matrix.RELEASE }} \
              KERNEL_CONFIGURE=no \
              BUILD_MINIMAL=${{ matrix.TYPE == 'minimal' && 'yes' || 'no' }} \
              BUILD_DESKTOP=${{ matrix.TYPE == 'desktop' && 'yes' || 'no' }} \
              DESKTOP_ENVIRONMENT=${{ matrix.DESKTOP_ENVIRONMENT }} \
              DESKTOP_ENVIRONMENT_CONFIG_NAME=${{ matrix.DESKTOP_ENVIRONMENT_CONFIG_NAME }} \
              DESKTOP_APPGROUPS_SELECTED=${{ matrix.DESKTOP_APPGROUPS_SELECTED }} \
              EXPERT=yes \
              COMPRESS_OUTPUTIMAGE=img
          sudo chown $(id -u):$(id -g) -R output/

      - name: 安装AmlImg
        run: |
          ver="v0.3.1"
          curl -L -o ./AmlImg https://github.com/hzyitc/AmlImg/releases/download/$ver/AmlImg_${ver}_linux_amd64
          chmod +x ./AmlImg

      - name: 下载解压最新u-boot
        run: |
          echo "::group::Download"
          curl -L -o ./uboot.img https://github.com/${UBOOT_REPO}/releases/download/${UBOOT_TAG}/${UBOOT_BURNIMG}
          echo "::endgroup::"

          echo "::group::Unpack"
          ./AmlImg unpack ./uboot.img burn/
          echo "::endgroup::"

      - name: 提取 boot 和 rootfs 分区
        run: |
          diskimg=$(ls output/images/*.img)
          loop=$(sudo losetup --find --show --partscan $diskimg)
          sudo img2simg ${loop}p1 burn/boot.simg
          sudo img2simg ${loop}p2 burn/rootfs.simg
          sudo losetup -d $loop
          sudo chown $(id -u):$(id -g) -R burn/

      - name: 生成刻录映像
        run: |
          echo -n "sha1sum $(sha1sum burn/boot.simg | awk '{print $1}')" >burn/boot.VERIFY
          echo -n "sha1sum $(sha1sum burn/rootfs.simg | awk '{print $1}')" >burn/rootfs.VERIFY

          cat <<EOF >>burn/commands.txt
          PARTITION:boot:sparse:boot.simg
          VERIFY:boot:normal:boot.VERIFY
          PARTITION:rootfs:sparse:rootfs.simg
          VERIFY:rootfs:normal:rootfs.VERIFY
          EOF

          prefix=$(ls output/images/*.img | sed 's/\.img$//')
          burnimg=${prefix}.burn.img
          ./AmlImg pack $burnimg burn/

      - name: 哈希和压缩镜像
        run: |
          for f in output/images/*.img; do
            sha256sum "$f" | tee -a sha256sum
            xz --threads=0 --compress "$f"
          done

      - name: 上传资料
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.RELEASE }}-可靠版-${{ matrix.TYPE == 'desktop' && matrix.DESKTOP_ENVIRONMENT || matrix.TYPE }}
          path: output/images/*

      - name: 生成发布信息
        run: |
          cat <<EOF | sed -E 's/^  //' | tee Release.md
            $(cat sha256sum | awk '{printf "%s: `%s`\n", $2, $1}')
          EOF

      - name: 上传最新版本
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          append_body: true
          body_path: Release.md
          files: |
            output/images/*
